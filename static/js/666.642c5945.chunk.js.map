{"version":3,"file":"static/js/666.642c5945.chunk.js","mappings":"8LAGA,MAs1BA,EAt1BqB,CACjBA,KAAM,aACNC,QAAS,gpCAiBTC,YAAa,oDACbC,YAAa,kBACbC,IAAK,y3IAyKLC,QAAS,CACLC,QAAQ,EACRC,UAAW,mBACXC,MAAO,GACPC,KAAM,CAAC,CACXC,MAAO,aACPR,YAAa,8CACbS,KAAM,q7CA8CNC,MAAO,CAAC,CACRZ,KAAM,aACNG,YAAa,8BACbU,gBAAiB,gDACjBC,UAAW,GACb,CACEd,KAAM,OACNG,YAAa,OACbW,UAAW,GACb,CACEd,KAAM,eACNG,YAAa,qBACbW,UAAW,KAEb,CACEJ,MAAO,2BACPR,YAAa,mJACbS,KAAM,2/GAiHNC,MAAO,CAAC,CACRZ,KAAM,QACNG,YAAa,8BACbU,gBAAiB,gDACjBC,UAAW,GACb,CACEd,KAAM,OACNG,YAAa,OACbW,UAAW,GACb,CACEd,KAAM,eACNG,YAAa,qBACbW,UAAW,KAEb,CACEJ,MAAO,6CACPR,YAAa,kIACbS,KAAM,wmGA4FNC,MAAO,CAAC,CACRZ,KAAM,QACNG,YAAa,8BACbU,gBAAiB,gDACjBC,UAAW,GACb,CACEd,KAAM,OACNG,YAAa,OACbW,UAAW,GACb,CACEd,KAAM,eACNG,YAAa,qBACbW,UAAW,KAEb,CACEJ,MAAO,iCACPR,YAAa,mGACbS,KAAM,qiGAyFNC,MAAO,CAAC,CACRZ,KAAM,QACNG,YAAa,8BACbU,gBAAiB,gDACjBC,UAAW,GACb,CACEd,KAAM,OACNG,YAAa,OACbW,UAAW,GACb,CACEd,KAAM,eACNG,YAAa,qBACbW,UAAW,KAEb,CACEJ,MAAO,uCACPR,YAAa,uFACbS,KAAM,i8GAsGNC,MAAO,CAAC,CACRZ,KAAM,QACNG,YAAa,8BACbU,gBAAiB,gDACjBC,UAAW,GACb,CACEd,KAAM,OACNG,YAAa,OACbW,UAAW,GACb,CACEd,KAAM,eACNG,YAAa,qBACbW,UAAW,KAEb,CACEJ,MAAO,iCACPR,YAAa,6FACbS,KAAM,8sIAiHNC,MAAO,CAAC,CACRZ,KAAM,QACNG,YAAa,8BACbU,gBAAiB,gDACjBC,UAAW,GACb,CACEd,KAAM,OACNG,YAAa,OACbW,UAAW,GACb,CACEd,KAAM,eACNG,YAAa,qBACbW,UAAW,O","sources":["../../README.md"],"sourcesContent":["import * as component_1 from '@kne/current-lib_react-enum';\nimport * as component_2 from 'antd';\nimport * as component_3 from '@kne/remote-loader';\nconst readmeConfig = {\n    name: `react-enum`,\n    summary: `<p>枚举值管理和展示组件，用于统一管理应用中的枚举数据，如性别、状态、类型等选项列表。</p>\n<h2>何时使用</h2>\n<ul>\n<li>需要展示枚举值的描述文本时</li>\n<li>需要将枚举列表渲染为下拉框、单选框等表单组件时</li>\n<li>需要统一管理应用中的枚举数据时</li>\n<li>需要支持多语言的枚举描述时</li>\n</ul>\n<h2>特性</h2>\n<ul>\n<li>📦 统一的枚举数据管理</li>\n<li>🔄 支持同步/异步加载</li>\n<li>📡 内置LRU缓存机制</li>\n<li>🌍 支持多语言</li>\n<li>🎨 多种格式化方式</li>\n<li>🔧 灵活的渲染函数</li>\n</ul>`,\n    description: `管理和获取枚举值.`,\n    packageName: `@kne/react-enum`,\n    api: `<h2>Enum 组件 API</h2>\n<h3>Enum（默认导出）</h3>\n<p>用于获取单个或多个枚举值的展示内容。</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>moduleName</td>\n<td>枚举模块名称，对应预设中配置的枚举名称</td>\n<td>string | string[]</td>\n<td>-</td>\n</tr>\n<tr>\n<td>name</td>\n<td>枚举值，当提供时获取单个枚举项；不提供时获取整个枚举列表</td>\n<td>string | number</td>\n<td>-</td>\n</tr>\n<tr>\n<td>format</td>\n<td>格式化方式：'default'返回描述文本，'origin'返回原始对象，'option'返回{label, value}格式</td>\n<td>'default' | 'origin' | 'option'</td>\n<td>'default'</td>\n</tr>\n<tr>\n<td>force</td>\n<td>是否强制刷新缓存，跳过缓存直接请求</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>children</td>\n<td>子元素或渲染函数。函数接收(data, fetchApi)参数</td>\n<td>ReactNode | Function</td>\n<td>-</td>\n</tr>\n<tr>\n<td>placeholder</td>\n<td>数据加载中时的占位内容</td>\n<td>ReactNode</td>\n<td>'--'</td>\n</tr>\n<tr>\n<td>error</td>\n<td>加载失败时的展示内容</td>\n<td>ReactNode | Function</td>\n<td>-</td>\n</tr>\n<tr>\n<td>loading</td>\n<td>自定义加载中状态的展示</td>\n<td>ReactNode</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3>EnumResource</h3>\n<p>用于获取完整的枚举列表资源。</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>moduleName</td>\n<td>枚举模块名称，支持数组以同时获取多个枚举</td>\n<td>string | string[]</td>\n<td>-</td>\n</tr>\n<tr>\n<td>format</td>\n<td>格式化方式</td>\n<td>'origin' | 'option' | 'default'</td>\n<td>'origin'</td>\n</tr>\n<tr>\n<td>children</td>\n<td>渲染函数，接收枚举列表作为参数</td>\n<td>Function</td>\n<td>-</td>\n</tr>\n<tr>\n<td>placeholder</td>\n<td>数据加载中时的占位内容</td>\n<td>ReactNode</td>\n<td>'--'</td>\n</tr>\n<tr>\n<td>error</td>\n<td>加载失败时的展示内容</td>\n<td>ReactNode | Function</td>\n<td>-</td>\n</tr>\n<tr>\n<td>loading</td>\n<td>自定义加载中状态的展示</td>\n<td>ReactNode</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3>枚举配置</h3>\n<p>枚举数据通过 <code>preset</code> 函数或 <code>PureGlobal/Global</code> 组件的 <code>preset.enums</code> 配置：</p>\n<pre><code class=\"language-javascript\">// 全局配置\npreset({\n  base: {\n    gender: () =&gt; [\n      { value: 'M', description: '男' },\n      { value: 'F', description: '女' }\n    ]\n  }\n});\n\n// 或通过 Global 组件配置\n&lt;PureGlobal preset={{\n  enums: {\n    status: async ({ language }) =&gt; {\n      // 支持异步加载\n      return [\n        { value: '1', description: '启用' },\n        { value: '0', description: '禁用' }\n      ];\n    }\n  }\n}}&gt;\n</code></pre>\n<h3>枚举项数据结构</h3>\n<table>\n<thead>\n<tr>\n<th>字段名</th>\n<th>说明</th>\n<th>类型</th>\n<th>必填</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>value</td>\n<td>枚举值</td>\n<td>string | number</td>\n<td>是</td>\n</tr>\n<tr>\n<td>description</td>\n<td>枚举描述文本</td>\n<td>string</td>\n<td>是</td>\n</tr>\n<tr>\n<td>translation</td>\n<td>多语言翻译对象</td>\n<td>object</td>\n<td>否</td>\n</tr>\n</tbody>\n</table>`,\n    example: {\n        isFull: false,\n        className: `react_enum_dbed9`,\n        style: ``,\n        list: [{\n    title: `EnumLegacy`,\n    description: `兼容老版本Enum的API`,\n    code: `const { default: Enum, preset } = _ReactEnum;\nconst { createWithRemoteLoader } = remoteLoader;\nconst { Divider } = antd;\n\npreset({\n  base: {\n    confirm: () => [{ description: '是', value: 'Y' }, {\n      description: '否', value: 'N'\n    }]\n  }\n});\n\nconst BaseExample = createWithRemoteLoader({\n  modules: ['components-core:Global@PureGlobal']\n})(({ remoteModules }) => {\n  const [PureGlobal] = remoteModules;\n  return <PureGlobal preset={{\n    enums: {\n      gender: [{ value: 'M', description: '男' }, {\n        value: 'F', description: '女'\n      }], marital: async () => [{ description: '已婚', value: 'Y' }, {\n        description: '未婚', value: 'N'\n      }]\n    }\n  }}>\n    <Enum moduleName=\"gender\" name=\"M\" />\n    <Divider />\n    <Enum moduleName=\"gender\">{(data) => {\n      return data.map((data) => \\`\\${data.value}:\\${data.description}\\`).join(',');\n    }}</Enum>\n    <Divider />\n    <Enum moduleName={['gender', 'marital']}>{([gender, marital]) => {\n      return <div>\n        <div>{gender.map((data) => \\`\\${data.value}:\\${data.description}\\`).join(',')}</div>\n        <div>{marital.map((data) => \\`\\${data.value}:\\${data.description}\\`).join(',')}</div>\n      </div>;\n    }}</Enum>\n    <Divider />\n    <Enum moduleName=\"confirm\" name=\"Y\" />\n    <Enum moduleName=\"confirm\" name=\"N\">{(data) => data.description}</Enum>\n  </PureGlobal>;\n});\n\nrender(<BaseExample />);\n\n`,\n    scope: [{\n    name: \"_ReactEnum\",\n    packageName: \"@kne/current-lib_react-enum\",\n    importStatement: \"import * as _ReactEnum from \\\"@kne/react-enum\\\"\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_2\n},{\n    name: \"remoteLoader\",\n    packageName: \"@kne/remote-loader\",\n    component: component_3\n}]\n},{\n    title: `基础用法`,\n    description: `展示枚举的基本使用，包括获取单个枚举值和枚举列表`,\n    code: `const { default: Enum } = _Enum;\nconst { createWithRemoteLoader } = remoteLoader;\nconst { Space, Select, Divider } = antd;\nconst BaseExample = createWithRemoteLoader({\n  modules: ['components-core:Global@PureGlobal']\n})(({ remoteModules }) => {\n  const [PureGlobal] = remoteModules;\n  return (\n    <PureGlobal\n      preset={{\n        locale: \"zh-CN\",\n        enums: {\n          // 同步加载的枚举\n          gender: [\n            { value: \"M\", description: \"男\" },\n            { value: \"F\", description: \"女\" },\n          ],\n          // 异步加载的枚举\n          status: async ({ locale }) => {\n            return new Promise((resolve) => {\n              setTimeout(() => {\n                resolve([\n                  { value: \"1\", description: \"启用\" },\n                  { value: \"0\", description: \"禁用\" },\n                ]);\n              }, 500);\n            });\n          },\n        },\n      }}\n    >\n      <Space direction=\"vertical\" size=\"large\" style={{ width: \"100%\" }}>\n        <div>\n          <h4>获取单个枚举值</h4>\n          <Space>\n            <span>性别：</span>\n            <Enum moduleName=\"gender\" name=\"M\" />\n            <Divider type=\"vertical\" />\n            <span>自定义渲染：</span>\n            <Enum moduleName=\"gender\" name=\"F\">\n              {(data) => <strong style={{ color: \"#f5222d\" }}>{data.description}</strong>}\n            </Enum>\n          </Space>\n        </div>\n        \n        <div>\n          <h4>获取枚举列表</h4>\n          <Enum moduleName=\"gender\">\n            {(list) => {\n              return (\n                <Space>\n                  <span>可选项：</span>\n                  {list.map((item, index) => (\n                    <span key={item.value}>\n                      {item.description}\n                      {index < list.length - 1 && \"、\"}\n                    </span>\n                  ))}\n                </Space>\n              );\n            }}\n          </Enum>\n        </div>\n        \n        <div>\n          <h4>渲染为下拉框</h4>\n          <Enum moduleName=\"status\">\n            {(list) => {\n              return (\n                <Select\n                  style={{ width: 150 }}\n                  placeholder=\"请选择状态\"\n                  options={list.map((item) => ({\n                    value: item.value,\n                    label: item.description,\n                  }))}\n                />\n              );\n            }}\n          </Enum>\n        </div>\n        \n        <div>\n          <h4>占位符和加载状态</h4>\n          <Space>\n            <span>状态：</span>\n            <Enum \n              moduleName=\"status\" \n              name=\"1\"\n              placeholder=\"加载中...\"\n            />\n          </Space>\n        </div>\n        \n        <div>\n          <h4>使用format=\"option\"直接获取选项格式</h4>\n          <Enum moduleName=\"gender\" format=\"option\">\n            {(list) => (\n              <Select\n                style={{ width: 150 }}\n                placeholder=\"请选择性别\"\n                options={list}\n              />\n            )}\n          </Enum>\n        </div>\n      </Space>\n    </PureGlobal>\n  );\n});\n\nrender(<BaseExample />);\n`,\n    scope: [{\n    name: \"_Enum\",\n    packageName: \"@kne/current-lib_react-enum\",\n    importStatement: \"import * as _ReactEnum from \\\"@kne/react-enum\\\"\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_2\n},{\n    name: \"remoteLoader\",\n    packageName: \"@kne/remote-loader\",\n    component: component_3\n}]\n},{\n    title: `异步加载与缓存`,\n    description: `展示异步加载枚举数据、Loading状态和强制刷新缓存`,\n    code: `const { default: Enum } = _Enum;\nconst { Space, Button, message } = antd;\nconst { useState } = React;\nconst { createWithRemoteLoader } = remoteLoader;\n\nconst AsyncEnumExample = createWithRemoteLoader({\n  modules: ['components-core:Global@PureGlobal']\n})(({ remoteModules }) => {\n  const [PureGlobal] = remoteModules;\n  const [refreshKey, setRefreshKey] = useState(0);\n  \n  return (\n    <PureGlobal\n      preset={{\n        locale: \"zh-CN\",\n        enums: {\n          // 异步加载枚举数据\n          userStatus: async ({ language }) => {\n            // 模拟从服务器获取数据\n            return new Promise((resolve) => {\n              setTimeout(() => {\n                resolve([\n                  { value: \"active\", description: \"活跃\" },\n                  { value: \"inactive\", description: \"非活跃\" },\n                  { value: \"pending\", description: \"待审核\" },\n                  { value: \"banned\", description: \"已禁用\" },\n                ]);\n              }, 1500);\n            });\n          },\n          // 同步枚举数据\n          priority: [\n            { value: \"low\", description: \"低优先级\" },\n            { value: \"medium\", description: \"中优先级\" },\n            { value: \"high\", description: \"高优先级\" },\n            { value: \"urgent\", description: \"紧急\" },\n          ],\n        },\n      }}\n    >\n      <Space direction=\"vertical\" size=\"large\" style={{ width: \"100%\" }}>\n        <div>\n          <h4>异步加载枚举（带Loading状态）</h4>\n          <Enum \n            key={refreshKey}\n            moduleName=\"userStatus\" \n            name=\"active\"\n            loading={<span>正在加载用户状态...</span>}\n            placeholder=\"--\"\n          >\n            {(data) => <div>当前状态：{data.description}</div>}\n          </Enum>\n        </div>\n        \n        <div>\n          <h4>强制刷新缓存</h4>\n          <Space>\n            <Enum \n              moduleName=\"userStatus\" \n              name=\"banned\"\n              force={refreshKey > 0}\n            >\n              {(data) => data.description}\n            </Enum>\n            <Button \n              onClick={() => {\n                setRefreshKey(prev => prev + 1);\n                message.info(\"已刷新缓存\");\n              }}\n            >\n              刷新缓存\n            </Button>\n          </Space>\n        </div>\n        \n        <div>\n          <h4>同步枚举数据（立即显示）</h4>\n          <Space>\n            <Enum moduleName=\"priority\" name=\"high\" />\n            <Enum moduleName=\"priority\" name=\"urgent\">\n              {(data) => <span style={{ color: \"red\" }}>{data.description}</span>}\n            </Enum>\n          </Space>\n        </div>\n      </Space>\n    </PureGlobal>\n  );\n});\n\nrender(<AsyncEnumExample />);\n\n`,\n    scope: [{\n    name: \"_Enum\",\n    packageName: \"@kne/current-lib_react-enum\",\n    importStatement: \"import * as _ReactEnum from \\\"@kne/react-enum\\\"\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_2\n},{\n    name: \"remoteLoader\",\n    packageName: \"@kne/remote-loader\",\n    component: component_3\n}]\n},{\n    title: `格式化方式`,\n    description: `展示不同的格式化方式和自定义渲染`,\n    code: `const { default: Enum } = _Enum;\nconst { createWithRemoteLoader } = remoteLoader;\nconst { Space, Divider, Card } = antd;\n\nconst FormatEnumExample = createWithRemoteLoader({\n  modules: ['components-core:Global@PureGlobal']\n})(({ remoteModules }) => {\n  const [PureGlobal] = remoteModules;\n  return (\n    <PureGlobal\n      preset={{\n        locale: \"zh-CN\",\n        enums: {\n          orderStatus: [\n            { value: \"created\", description: \"已创建\", color: \"#666\" },\n            { value: \"paid\", description: \"已支付\", color: \"#1890ff\" },\n            { value: \"shipped\", description: \"已发货\", color: \"#52c41a\" },\n            { value: \"completed\", description: \"已完成\", color: \"#52c41a\" },\n            { value: \"cancelled\", description: \"已取消\", color: \"#f5222d\" },\n          ],\n        },\n      }}\n    >\n      <Space direction=\"vertical\" size=\"large\" style={{ width: \"100%\" }}>\n        <Card title=\"不同格式化方式\" size=\"small\">\n          <Space direction=\"vertical\">\n            <div>\n              <strong>默认格式（format=\"default\"）：</strong>\n              <Enum moduleName=\"orderStatus\" name=\"paid\" format=\"default\" />\n            </div>\n            \n            <Divider />\n            \n            <div>\n              <strong>原始对象（format=\"origin\"）：</strong>\n              <Enum moduleName=\"orderStatus\" name=\"paid\" format=\"origin\">\n                {(data) => (\n                  <pre>{JSON.stringify(data, null, 2)}</pre>\n                )}\n              </Enum>\n            </div>\n            \n            <Divider />\n            \n            <div>\n              <strong>选项格式（format=\"option\"）：</strong>\n              <Enum moduleName=\"orderStatus\" name=\"paid\" format=\"option\">\n                {(data) => {\n                  return (\n                    <span>label: {data.description}, value: {data.value}</span>\n                  )\n                }}\n              </Enum>\n            </div>\n          </Space>\n        </Card>\n        \n        <Card title=\"自定义渲染\" size=\"small\">\n          <Space>\n            <Enum moduleName=\"orderStatus\" name=\"shipped\" format=\"origin\">\n              {(data) => (\n                <span style={{ color: data.color }}>\n                  ● {data.description}\n                </span>\n              )}\n            </Enum>\n            \n            <Enum moduleName=\"orderStatus\" name=\"cancelled\" format=\"origin\">\n              {(data) => (\n                <span style={{ \n                  padding: \"2px 8px\",\n                  backgroundColor: data.color,\n                  color: \"#fff\",\n                  borderRadius: \"4px\"\n                }}>\n                  {data.description}\n                </span>\n              )}\n            </Enum>\n          </Space>\n        </Card>\n      </Space>\n    </PureGlobal>\n  );\n});\n\nrender(<FormatEnumExample />);\n\n`,\n    scope: [{\n    name: \"_Enum\",\n    packageName: \"@kne/current-lib_react-enum\",\n    importStatement: \"import * as _ReactEnum from \\\"@kne/react-enum\\\"\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_2\n},{\n    name: \"remoteLoader\",\n    packageName: \"@kne/remote-loader\",\n    component: component_3\n}]\n},{\n    title: `渲染枚举列表`,\n    description: `将枚举列表渲染为各种表单组件`,\n    code: `const { default: Enum } = _Enum;\nconst { createWithRemoteLoader } = remoteLoader;\nconst { Space, Select, Radio, Checkbox, Table } = antd;\n\nconst ListEnumExample = createWithRemoteLoader({\n  modules: ['components-core:Global@PureGlobal']\n})(({ remoteModules }) => {\n  const [PureGlobal] = remoteModules;\n  return (\n    <PureGlobal\n      preset={{\n        locale: \"zh-CN\",\n        enums: {\n          department: [\n            { value: \"tech\", description: \"技术部\" },\n            { value: \"product\", description: \"产品部\" },\n            { value: \"design\", description: \"设计部\" },\n            { value: \"marketing\", description: \"市场部\" },\n            { value: \"hr\", description: \"人力资源部\" },\n            { value: \"finance\", description: \"财务部\" },\n          ],\n          role: [\n            { value: \"admin\", description: \"管理员\", level: 1 },\n            { value: \"manager\", description: \"经理\", level: 2 },\n            { value: \"employee\", description: \"员工\", level: 3 },\n            { value: \"intern\", description: \"实习生\", level: 4 },\n          ],\n        },\n      }}\n    >\n      <Space direction=\"vertical\" size=\"large\" style={{ width: \"100%\" }}>\n        <div>\n          <h4>渲染为 Select 下拉框</h4>\n          <Enum moduleName=\"department\">\n            {(list) => (\n              <Select\n                style={{ width: 200 }}\n                placeholder=\"请选择部门\"\n                options={list.map((item) => ({\n                  value: item.value,\n                  label: item.description,\n                }))}\n              />\n            )}\n          </Enum>\n        </div>\n        \n        <div>\n          <h4>渲染为 Radio 单选组</h4>\n          <Enum moduleName=\"role\">\n            {(list) => (\n              <Radio.Group>\n                {list.map((item) => (\n                  <Radio key={item.value} value={item.value}>\n                    {item.description}\n                  </Radio>\n                ))}\n              </Radio.Group>\n            )}\n          </Enum>\n        </div>\n        \n        <div>\n          <h4>渲染为 Checkbox 多选组</h4>\n          <Enum moduleName=\"department\">\n            {(list) => (\n              <Checkbox.Group>\n                {list.slice(0, 4).map((item) => (\n                  <Checkbox key={item.value} value={item.value}>\n                    {item.description}\n                  </Checkbox>\n                ))}\n              </Checkbox.Group>\n            )}\n          </Enum>\n        </div>\n        \n        <div>\n          <h4>渲染为 Table 表格</h4>\n          <Enum moduleName=\"role\" format=\"origin\">\n            {(list) => (\n              <Table\n                size=\"small\"\n                pagination={false}\n                columns={[\n                  { title: \"编码\", dataIndex: \"value\", key: \"value\" },\n                  { title: \"名称\", dataIndex: \"description\", key: \"description\" },\n                  { title: \"级别\", dataIndex: \"level\", key: \"level\" },\n                ]}\n                dataSource={list.map(item => ({ ...item, key: item.value }))}\n              />\n            )}\n          </Enum>\n        </div>\n      </Space>\n    </PureGlobal>\n  );\n});\n\nrender(<ListEnumExample />);\n\n`,\n    scope: [{\n    name: \"_Enum\",\n    packageName: \"@kne/current-lib_react-enum\",\n    importStatement: \"import * as _ReactEnum from \\\"@kne/react-enum\\\"\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_2\n},{\n    name: \"remoteLoader\",\n    packageName: \"@kne/remote-loader\",\n    component: component_3\n}]\n},{\n    title: `多枚举模块`,\n    description: `同时获取多个枚举模块和错误处理`,\n    code: `const { default: Enum } = _Enum;\nconst { createWithRemoteLoader } = remoteLoader;\nconst { Space, Card, Tag } = antd;\n\nconst MultiEnumExample = createWithRemoteLoader({\n  modules: ['components-core:Global@PureGlobal']\n})(({ remoteModules }) => {\n  const [PureGlobal] = remoteModules;\n  return (\n    <PureGlobal\n      preset={{\n        locale: \"zh-CN\",\n        enums: {\n          country: [\n            { value: \"CN\", description: \"中国\" },\n            { value: \"US\", description: \"美国\" },\n            { value: \"UK\", description: \"英国\" },\n            { value: \"JP\", description: \"日本\" },\n          ],\n          language: [\n            { value: \"zh-CN\", description: \"简体中文\" },\n            { value: \"en-US\", description: \"英语\" },\n            { value: \"ja-JP\", description: \"日语\" },\n            { value: \"ko-KR\", description: \"韩语\" },\n          ],\n          timezone: [\n            { value: \"UTC+8\", description: \"北京时间\" },\n            { value: \"UTC+0\", description: \"格林威治时间\" },\n            { value: \"UTC-5\", description: \"纽约时间\" },\n            { value: \"UTC+9\", description: \"东京时间\" },\n          ],\n        },\n      }}\n    >\n      <Space direction=\"vertical\" size=\"large\" style={{ width: \"100%\" }}>\n        <Card title=\"同时获取多个枚举模块\" size=\"small\">\n          <Enum moduleName={[\"country\", \"language\", \"timezone\"]}>\n            {([countries, languages, timezones]) => (\n              <Space direction=\"vertical\">\n                <div>\n                  <strong>国家列表：</strong>\n                  <Space>\n                    {countries.map(item => (\n                      <Tag key={item.value}>{item.description}</Tag>\n                    ))}\n                  </Space>\n                </div>\n                <div>\n                  <strong>语言列表：</strong>\n                  <Space>\n                    {languages.map(item => (\n                      <Tag key={item.value} color=\"blue\">{item.description}</Tag>\n                    ))}\n                  </Space>\n                </div>\n                <div>\n                  <strong>时区列表：</strong>\n                  <Space>\n                    {timezones.map(item => (\n                      <Tag key={item.value} color=\"green\">{item.description}</Tag>\n                    ))}\n                  </Space>\n                </div>\n              </Space>\n            )}\n          </Enum>\n        </Card>\n        \n        <Card title=\"组合使用多个枚举\" size=\"small\">\n          <Space>\n            <span>用户来自</span>\n            <Enum moduleName=\"country\" name=\"CN\">\n              {(data) => <strong>{data.description}</strong>}\n            </Enum>\n            <span>，使用</span>\n            <Enum moduleName=\"language\" name=\"zh-CN\">\n              {(data) => <strong>{data.description}</strong>}\n            </Enum>\n            <span>，时区为</span>\n            <Enum moduleName=\"timezone\" name=\"UTC+8\">\n              {(data) => <strong>{data.description}</strong>}\n            </Enum>\n          </Space>\n        </Card>\n        \n        <Card title=\"错误处理\" size=\"small\">\n          <Space direction=\"vertical\">\n            <div>\n              <strong>不存在的枚举模块：</strong>\n              <Enum \n                moduleName=\"notExist\" \n                name=\"test\"\n                error={<span style={{ color: \"red\" }}>枚举加载失败</span>}\n              />\n            </div>\n            <div>\n              <strong>不存在的枚举值（显示占位符）：</strong>\n              <Enum \n                moduleName=\"country\" \n                name=\"XX\"\n                placeholder=\"未知国家\"\n              />\n            </div>\n          </Space>\n        </Card>\n      </Space>\n    </PureGlobal>\n  );\n});\n\nrender(<MultiEnumExample />);\n\n`,\n    scope: [{\n    name: \"_Enum\",\n    packageName: \"@kne/current-lib_react-enum\",\n    importStatement: \"import * as _ReactEnum from \\\"@kne/react-enum\\\"\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_2\n},{\n    name: \"remoteLoader\",\n    packageName: \"@kne/remote-loader\",\n    component: component_3\n}]\n}]\n    }\n};\nexport default readmeConfig;\n"],"names":["name","summary","description","packageName","api","example","isFull","className","style","list","title","code","scope","importStatement","component"],"sourceRoot":""}